diff --git a/node_modules/react-native-reanimated/ios/LayoutReanimation/REAAnimationsManager.m b/node_modules/react-native-reanimated/ios/LayoutReanimation/REAAnimationsManager.m
index 337b1be..a7b0b1a 100644
--- a/node_modules/react-native-reanimated/ios/LayoutReanimation/REAAnimationsManager.m
+++ b/node_modules/react-native-reanimated/ios/LayoutReanimation/REAAnimationsManager.m
@@ -59,7 +59,7 @@ - (void)invalidate
 }
 
 - (void)setAnimationStartingBlock:
-    (void (^)(NSNumber *tag, NSString *type, NSDictionary *yogaValues, NSNumber *depth))startAnimation
+(void (^)(NSNumber *tag, NSString *type, NSDictionary *yogaValues, NSNumber *depth))startAnimation
 {
   _startAnimationForTag = startAnimation;
 }
@@ -178,8 +178,8 @@ - (void)notifyAboutProgress:(NSDictionary *)newStyle tag:(NSNumber *)tag
 }
 
 - (void)setNewProps:(NSMutableDictionary *)newProps
-              forView:(UIView *)view
-    withComponentData:(RCTComponentData *)componentData
+            forView:(UIView *)view
+  withComponentData:(RCTComponentData *)componentData
 {
   if (newProps[@"height"]) {
     double height = [newProps[@"height"] doubleValue];
@@ -247,6 +247,7 @@ - (void)onViewRemoval:(UIView *)view before:(REASnapshot *)before
 
 - (void)onViewCreate:(UIView *)view after:(REASnapshot *)after
 {
+  _reaUiManager.flushUiOperations();
   NSNumber *tag = view.reactTag;
   if (_states[tag] == nil) {
     _states[tag] = [NSNumber numberWithInt:Inactive];
diff --git a/node_modules/react-native-reanimated/ios/LayoutReanimation/REAUIManager.mm b/node_modules/react-native-reanimated/ios/LayoutReanimation/REAUIManager.mm
index 252f263..ad87935 100644
--- a/node_modules/react-native-reanimated/ios/LayoutReanimation/REAUIManager.mm
+++ b/node_modules/react-native-reanimated/ios/LayoutReanimation/REAUIManager.mm
@@ -154,10 +154,10 @@ - (RCTViewManagerUIBlock)uiBlockWithLayoutUpdateForRootView:(RCTRootShadowView *
       reactTags[index] = shadowView.reactTag;
       RCTLayoutMetrics layoutMetrics = shadowView.layoutMetrics;
       frameDataArray[index++] = (RCTFrameData){layoutMetrics.frame,
-                                               layoutMetrics.layoutDirection,
-                                               shadowView.isNewView,
-                                               shadowView.superview.isNewView,
-                                               layoutMetrics.displayType};
+        layoutMetrics.layoutDirection,
+        shadowView.isNewView,
+        shadowView.superview.isNewView,
+        layoutMetrics.displayType};
     }
   }
   
@@ -214,7 +214,7 @@ - (RCTViewManagerUIBlock)uiBlockWithLayoutUpdateForRootView:(RCTRootShadowView *
       RCTLayoutAnimation *updatingLayoutAnimation = isNew ? nil : layoutAnimationGroup.updatingLayoutAnimation;
       BOOL shouldAnimateCreation = isNew && !frameData.parentIsNew;
       RCTLayoutAnimation *creatingLayoutAnimation =
-          shouldAnimateCreation ? layoutAnimationGroup.creatingLayoutAnimation : nil;
+      shouldAnimateCreation ? layoutAnimationGroup.creatingLayoutAnimation : nil;
       BOOL isHidden = frameData.displayType == RCTDisplayTypeNone;
       
       void (^completion)(BOOL) = ^(BOOL finished) {
@@ -258,23 +258,23 @@ - (RCTViewManagerUIBlock)uiBlockWithLayoutUpdateForRootView:(RCTRootShadowView *
         }
         
         [creatingLayoutAnimation
-              performAnimations:^{
-                if ([property isEqualToString:@"scaleX"] || [property isEqualToString:@"scaleY"] ||
-                    [property isEqualToString:@"scaleXY"]) {
-                  view.layer.transform = finalTransform;
-                } else if ([property isEqualToString:@"opacity"]) {
-                  view.layer.opacity = finalOpacity;
-                }
-              }
-            withCompletionBlock:completion];
+         performAnimations:^{
+          if ([property isEqualToString:@"scaleX"] || [property isEqualToString:@"scaleY"] ||
+              [property isEqualToString:@"scaleXY"]) {
+            view.layer.transform = finalTransform;
+          } else if ([property isEqualToString:@"opacity"]) {
+            view.layer.opacity = finalOpacity;
+          }
+        }
+         withCompletionBlock:completion];
         
       } else if (updatingLayoutAnimation) {
         // Animate view update
         [updatingLayoutAnimation
-              performAnimations:^{
-                [view reactSetFrame:frame];
-              }
-            withCompletionBlock:completion];
+         performAnimations:^{
+          [view reactSetFrame:frame];
+        }
+         withCompletionBlock:completion];
         
       } else {
         // Update without animation
@@ -301,12 +301,12 @@ - (RCTViewManagerUIBlock)uiBlockWithLayoutUpdateForRootView:(RCTRootShadowView *
 
 - (Class)class
 {
-    return [RCTUIManager class];
+  return [RCTUIManager class];
 }
 
 + (Class)class
 {
-    return [RCTUIManager class];
+  return [RCTUIManager class];
 }
 
 - (void)setUp:(REAAnimationsManager*) animationsManager
@@ -339,10 +339,4 @@ - (void)unregisterView:(id<RCTComponent>) view
   [viewRegistry removeObjectForKey:view.reactTag];
 }
 
-- (void)batchDidComplete
-{
-  self.flushUiOperations();
-  [super batchDidComplete];
-}
-
 @end
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/Colors.js b/node_modules/react-native-reanimated/lib/reanimated2/Colors.js
index c0ae8ce..fdff2e5 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/Colors.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/Colors.js
@@ -538,16 +538,8 @@ const interpolateColorsRGB = (value, inputRange, colors) => {
     return rgbaColor(r, g, b, a);
 };
 const BUFFER_SIZE = 200;
-const hashOrderRGBA = new ArrayBuffer(BUFFER_SIZE);
-let curentHashIndexRGBA = 0;
-const interpolateCacheRGBA = {};
 const getInterpolateCacheRGBA = (colors) => {
     'worklet';
-    const hash = colors.join('');
-    const cache = interpolateCacheRGBA[hash];
-    if (cache !== undefined) {
-        return cache;
-    }
     const r = [];
     const g = [];
     const b = [];
@@ -563,26 +555,10 @@ const getInterpolateCacheRGBA = (colors) => {
             a.push(opacity(proocessedColor));
         }
     }
-    const newCache = { r, g, b, a };
-    const overrideHash = hashOrderRGBA[curentHashIndexRGBA];
-    if (overrideHash) {
-        delete interpolateCacheRGBA[overrideHash];
-    }
-    interpolateCacheRGBA[hash] = newCache;
-    hashOrderRGBA[curentHashIndexRGBA] = hash;
-    curentHashIndexRGBA = (curentHashIndexRGBA + 1) % BUFFER_SIZE;
-    return newCache;
+    return { r, g, b, a };
 };
-const hashOrderHSV = new ArrayBuffer(BUFFER_SIZE);
-let curentHashIndexHSV = 0;
-const interpolateCacheHSV = {};
 const getInterpolateCacheHSV = (colors) => {
     'worklet';
-    const hash = colors.join('');
-    const cache = interpolateCacheHSV[hash];
-    if (cache !== undefined) {
-        return cache;
-    }
     const h = [];
     const s = [];
     const v = [];
@@ -595,15 +571,7 @@ const getInterpolateCacheHSV = (colors) => {
             v.push(proocessedColor.v);
         }
     }
-    const newCache = { h, s, v };
-    const overrideHash = hashOrderHSV[curentHashIndexHSV];
-    if (overrideHash) {
-        delete interpolateCacheHSV[overrideHash];
-    }
-    interpolateCacheHSV[hash] = newCache;
-    hashOrderHSV[curentHashIndexHSV] = hash;
-    curentHashIndexHSV = (curentHashIndexHSV + 1) % BUFFER_SIZE;
-    return newCache;
+    return { h, s, v };
 };
 export const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {
     'worklet';
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Colors.ts b/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
index 66e5c13..3da0c7c 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/Colors.ts
@@ -685,20 +685,10 @@ interface InterpolateCacheRGBA {
   a: number[];
 }
 
-const BUFFER_SIZE = 200;
-const hashOrderRGBA: any = new ArrayBuffer(BUFFER_SIZE);
-let curentHashIndexRGBA = 0;
-const interpolateCacheRGBA: { [name: string]: InterpolateCacheRGBA } = {};
-
 const getInterpolateCacheRGBA = (
   colors: readonly (string | number)[]
 ): InterpolateCacheRGBA => {
   'worklet';
-  const hash = colors.join('');
-  const cache = interpolateCacheRGBA[hash];
-  if (cache !== undefined) {
-    return cache;
-  }
 
   const r = [];
   const g = [];
@@ -715,15 +705,7 @@ const getInterpolateCacheRGBA = (
       a.push(opacity(proocessedColor));
     }
   }
-  const newCache = { r, g, b, a };
-  const overrideHash = hashOrderRGBA[curentHashIndexRGBA];
-  if (overrideHash) {
-    delete interpolateCacheRGBA[overrideHash];
-  }
-  interpolateCacheRGBA[hash] = newCache;
-  hashOrderRGBA[curentHashIndexRGBA] = hash;
-  curentHashIndexRGBA = (curentHashIndexRGBA + 1) % BUFFER_SIZE;
-  return newCache;
+  return { r, g, b, a };
 };
 
 interface InterpolateCacheHSV {
@@ -732,20 +714,10 @@ interface InterpolateCacheHSV {
   v: number[];
 }
 
-const hashOrderHSV: any = new ArrayBuffer(BUFFER_SIZE);
-let curentHashIndexHSV = 0;
-const interpolateCacheHSV: { [name: string]: InterpolateCacheHSV } = {};
-
 const getInterpolateCacheHSV = (
   colors: readonly (string | number)[]
 ): InterpolateCacheHSV => {
   'worklet';
-  const hash = colors.join('');
-  const cache = interpolateCacheHSV[hash];
-  if (cache !== undefined) {
-    return cache;
-  }
-
   const h = [];
   const s = [];
   const v = [];
@@ -758,15 +730,7 @@ const getInterpolateCacheHSV = (
       v.push(proocessedColor.v);
     }
   }
-  const newCache = { h, s, v };
-  const overrideHash = hashOrderHSV[curentHashIndexHSV];
-  if (overrideHash) {
-    delete interpolateCacheHSV[overrideHash];
-  }
-  interpolateCacheHSV[hash] = newCache;
-  hashOrderHSV[curentHashIndexHSV] = hash;
-  curentHashIndexHSV = (curentHashIndexHSV + 1) % BUFFER_SIZE;
-  return newCache;
+  return { h, s, v };
 };
 
 export const interpolateColor = (
